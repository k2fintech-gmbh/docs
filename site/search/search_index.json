{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WebSocket protocol","text":"<p>This document provides an overview of the WebSocket protocol, which is used for messaging</p>"},{"location":"#message-types","title":"Message types","text":"<pre><code>  sequenceDiagram\n\n\n    Client-&gt;&gt;Server: Requests\n    activate Server\n    Server--&gt;&gt;Client: Responses\n    deactivate Server\n\n    Server-&gt;&gt;Client: Events\n    activate Client\n    Client--&gt;&gt;Server: Acknowledgments\n    deactivate Client\n    Client-&gt;&gt;Server: Events</code></pre>"},{"location":"#1-client-request","title":"1. Client Request","text":"<p>Clients send requests to perform actions like sending, editing, or deleting messages. Each request includes a timestamp and a unique identifier for tracking and synchronization.</p> Field Type Example type const \"request\" timestamp number 1700000000000 id string \"req001\" payloadType \"new\", \u201cedit\u201d, \u201cdelete\u201d, ... see requests \"new\" payload requests ****<code>{\"chatId\":\"User2\",\"message\":\"Hi from User1!\"}</code>"},{"location":"#2-server-response","title":"2. Server Response","text":"<p>The server sends an response message in response to client requests,confirming that the requested action has been processed.</p> Field Type Example type const \"response\" timestamp number 1700000000000 id string \"req001\" payload? any <code>{\"messageId\":5}</code>"},{"location":"#3-server-event-and-acknowledgment","title":"3. Server Event and Acknowledgment","text":"<p>Server events are notifications or updates that are pushed to other clients involved in the chat, such as new messages or changes to existing ones. Clients must acknowledge receipt of these events by sending an acknowledgment message back to the server.</p> Field Type Example type const \"event\" timestamp number 1700000000000 id number 23 eventType ServerEvent \"online\" payload? ServerEvent <code>{\"userId\": \"User2\"}</code>"},{"location":"#4-acknowledgment","title":"4. Acknowledgment","text":"<p>Clients must send an acknowledgment message back to the server for each event received.</p> Field Type Example type const \"ack\" id string \"23\" <p>Example acknowledgment message:</p> <pre><code>{\n  \"type\": \"ack\",\n  \"id\": \"23\"\n}\n</code></pre>"},{"location":"#example","title":"Example","text":"<p>jsons</p> <pre><code>sequenceDiagram\n    participant User1\n    participant Server\n    participant ****\n\n\n\n\n    Note over User1,User2: \"typing\"\n    User1-&gt;&gt;Server: client event 'typing', chatId User2\n    activate Server\n\n    Server-&gt;&gt;User2: server event 'typing', chatId User1\n    deactivate Server\n\n    Note over User1,User2: message sending\n    User1-&gt;&gt;Server: Sends message to User2\n    activate Server\n    Note over User1,Server: request 'new'\n    Server-&gt;&gt;User1: messageId: 125\n    Note over  Server,User1: response to 'new' request\n    Server-&gt;&gt;User2: server event 'new' (messageId: 125)\n    User2--)Server: Ack for 'new' event\n    deactivate Server\n    Note over User1,User2: \"delivering\"\n\n    User2-&gt;&gt;Server: Message 125 delivered\n    activate Server\n    Note over  User2,Server: request 'dlvrd'\n    Server-&gt;&gt;User2: \ud83e\udee1\n    Note over  Server,User2: response to 'dlvrd'\n    Server-&gt;&gt;User1: Event that message has been delivered\n    Note over  Server,User1: server event 'dlvrd'\n    User1-&gt;&gt;Server: Ack for dlvrd event\n\n\n    User2-&gt;&gt;Server: Message read (messageId: 125)\n    Note over User2,Server: request 'read'\n    Server-&gt;&gt;User2: \ud83e\udee1\n    Note over  Server,User2: response\n\n    Server--)User1: Notification that message has been read\n    Note over  Server,User1: server event 'read'\n    User1-&gt;&gt;Server: Ack for read event\n\n\n    User1-&gt;&gt;Server: User1 requests deletion of a message sent to User2 (id: 2)\n    Note over User1,Server: request\n\n    Server-&gt;&gt;User1: Accept deletion\n    Note over Server,User1: response\n    Server--)User2: Notification that a message from User1 has been deleted\n    Note over  Server,User2: event\n    User2-&gt;&gt;Server: Ack for message deleted event\n\n</code></pre>"},{"location":"calls-integration/","title":"calls note","text":"<pre><code>sequenceDiagram\n    participant Calls\n    Note over ChatStorage: \"DialogDO or GroupchatDO\"\n    participant ChatStorage\n    participant MessagingDO\n\n    Calls-&gt;&gt;ChatStorage: newCall(newCallRequest)\n    ChatStorage-&gt;&gt;ChatStorage: 'store call as message'\n    ChatStorage-&gt;&gt;MessagingDO: NewCallEventHandler(newCallInternalEvent)\n    ChatStorage-&gt;&gt;MessagingDO: NewCallEventHandler(newCallInternalEvent)\n    ChatStorage-&gt;&gt;MessagingDO: NewCallEventHandler(newCallInternalEvent)\n    Note OVER ChatStorage,MessagingDO: for each participant\n    MessagingDO-&gt;&gt;MessagingDO: modify chat list</code></pre> <ol> <li>Big-Calls sends a <code>newCall(newCallRequest)</code> to ChatStorage.</li> <li>ChatStorage stores the call as a message.</li> <li>ChatStorage sends <code>NewCallEventHandler(newCallInternalEvent)</code> to MessagingDO.</li> <li>ChatStorage repeats sending <code>NewCallEventHandler(newCallInternalEvent)</code> to MessagingDO for each participant.</li> <li>MessagingDO modifies the chat list accordingly.</li> </ol>"},{"location":"calls-research/","title":"\u0417\u0432\u043e\u043d\u043a\u0438","text":""},{"location":"calls-research/#api-sdk","title":"\u0412\u043d\u0435\u0448\u043d\u0438\u0435 API \u0441 SDK","text":"<p>\u0412\u0441\u0435 \u0430\u043f\u0438 \u0438\u043c\u0435\u044e\u0442 iOS/Android/Web SDK</p> <ul> <li>Daily.co</li> <li>Agora</li> <li>Vonage (TokBox OpenTok)</li> <li>Sandbird</li> </ul> \u043c\u0435\u043d\u0435\u0435 \u0443\u0434\u0430\u0447\u043d\u044b\u0435 \u0440\u0435\u0448\u0435\u043d\u0438\u044f <ul> <li>Sinch </li> <li>Zoom SDK</li> <li>Jitsi</li> </ul>"},{"location":"calls-research/#native-cloudflare-backend","title":"Native Cloudflare backend","text":""},{"location":"calls-research/#_2","title":"\u0414\u0435\u043c\u043e \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435","text":"<p> \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u0434\u0435\u043c\u043e, \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f</p>"},{"location":"calls-research/#opensource-sdks","title":"Opensource SDKs","text":""},{"location":"calls-research/#tuicallkit","title":"TUICallKit (\u043a\u0438\u0442\u0430\u0439\u0441\u043a\u043e\u0435)","text":"<p>Github</p>"},{"location":"calls-research/#_3","title":"\u0417\u0432\u043e\u043d\u043a\u0438","text":""},{"location":"calls/","title":"swagger","text":""},{"location":"client-events/","title":"Client events","text":""},{"location":"client-events/#typing","title":"typing","text":"Field Type Example Possible Values chatId string \"User2\" Chat IDs stop? boolean true"},{"location":"client-events/#offline","title":"offline","text":"Field Type Example Possible Values"},{"location":"client-requests/","title":"Requests with responses","text":"<p>The following tables represent the structure for various payloads, client-server requests and responses.</p>"},{"location":"client-requests/#payload-types","title":"payload types","text":""},{"location":"client-requests/#new","title":"new","text":"<p>request payload schema:</p> Field Type Example Possible Values chatId string \"User2\" Chat IDs message string \"Hello, World!\" Any string clientMessageId string \"66d93f9b-a8ff-4f18-a092-c19bdeb31fa4\" Any string attachments? array See \"Attachments\" Array of Attachment objects replyTo? integer 1 <p>response payload schema:</p> Field Type Example Possible Values messageId integer 123 message seq number timestamp integer 1700500000000 clientMessageId string \"66d93f9b-a8ff-4f18-a092-c19bdeb31fa4\" Any string"},{"location":"client-requests/#dlvrd","title":"dlvrd","text":"<p>set mark \"delivered\" to a message.</p> <p>request payload schema:</p> Field Type Example Possible Values chatId string \"User2\" Chat IDs messageId? integer 123 Message IDs <p>message id is optional, if not specified, all messages will be marked as delivered</p> <p>response payload schema:</p> Field Type Example Possible Values messageId integer 123 Message IDs timestamp integer 1700500000000 clientMessageId string \"66d93f9b-a8ff-4f18-a092-c19bdeb31fa4\" Any string"},{"location":"client-requests/#read","title":"read","text":"<p>set mark \"read\" to a message</p> Field Type Example Possible Values chatId string \"User2\" Chat IDs messageId? integer 123 Message IDs <p>message id is optional, if not specified, all messages will be marked as read</p> <p>response payload schema:</p> Field Type Example Possible Values messageId integer 123 Message IDs timestamp integer 1700500000000 missed integer 2 clientMessageId string \"66d93f9b-a8ff-4f18-a092-c19bdeb31fa4\" Any string read / dlvrd optimizations <p>\u201cread\u201d and \u201cdelivered\u201d marks are placed on all messages whose id &lt;= transmitted, if they are not already marked as \u201cread\u201d and \u201cdelivered\u201d. For example, you have 5 new messages. you can pass id = 5 and all 5 will be marked as read. If you pass id = 4, the fifth will remain unread</p>"},{"location":"client-requests/#delete","title":"delete","text":"<p>delete a message.</p> <p>request payload schema:</p> Field Type Example Possible Values chatId string \"User2\" Chat IDs originalMessageId integer 123 Message IDs <p>response payload schema:</p> Field Type Example Possible Values messageId integer 123 Message IDs timestamp integer 1700500000000 clientMessageId string \"66d93f9b-a8ff-4f18-a092-c19bdeb31fa4\" Any string"},{"location":"client-requests/#edit","title":"edit","text":"<p>edit a message.</p> <p>request payload schema:</p> Field Type Example Possible Values chatId string \"User2\" Chat IDs originalMessageId integer 123 Message IDs message string \"Hello, World!\" Any string attachments? array See \"Attachments\" Array of Attachment objects <p>response payload schema:</p> Field Type Example Possible Values messageId integer 123 Message IDs timestamp integer 1700500000000 clientMessageId string \"66d93f9b-a8ff-4f18-a092-c19bdeb31fa4\" Any string"},{"location":"client-requests/#messages","title":"messages","text":"<p>request payload schema:</p> Field Type Example Possible Values chatId string \"User2\" Chat IDs startId? integer 199 Message IDs endId? integer 199 Message IDs count? integer 50 1 - 500, default - 300 pagination <p>endId and startId are optional. You cannot specify them at the same time. If you want to download several messages starting with N, specify startId=N. if the user scrolls up the chat, specify the endId (before which message the next portion should be loaded). if you need to get the last few messages, don't pass endId and startId, then the \"count\" of the latest ones will be loaded.</p> <p>response payload schema:</p> <p>Message[]</p>"},{"location":"client-requests/#chat","title":"chat","text":"<p>request payload schema:</p> Field Type Example Possible Values chatId string \"User2\" Chat IDs <p>response payload schema:</p> <p>Chat</p>"},{"location":"client-requests/#chats","title":"chats","text":"<p>request payload schema:</p> Field Type Example <p>response payload schema:</p> <p>ChatList</p>"},{"location":"dialog-ids/","title":"Dialog ids","text":""},{"location":"dialog-ids/#dialogs-visual-schema","title":"Dialogs visual schema","text":"<pre><code>sequenceDiagram\n    participant User1\n    participant Server\n    participant User2\n\n    Note over User1, User2: for User1 chatId is always 'User2',&lt;br/&gt; for User2 chatId is always 'User1'\n\n    User1-&gt;&gt;Server: Send message \"Hi user2\"&lt;br/&gt;(chatId: 'User2')\n    Server-&gt;&gt;User1: Event \"Hi user2\"&lt;br/&gt;(chatId: 'User2')\n    Server-&gt;&gt;User2: Event \"Hi user2\"&lt;br/&gt;(chatId: 'User1')</code></pre>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#example-full-cycle-of-message","title":"Example: full cycle of message","text":"<p>jsons</p> <pre><code>sequenceDiagram\n    participant User1\n    participant Server\n    participant User2\n\n\n\n\n    Note over User1,User2: \"typing\"\n    User1-&gt;&gt;Server: client event 'typing', chatId User2\n    activate Server\n\n    Server-&gt;&gt;User2: server event 'typing', chatId User1\n    deactivate Server\n\n    Note over User1,User2: message sending\n    User1-&gt;&gt;Server: Sends message to User2\n    activate Server\n    Note over User1,Server: request 'new'\n    Server-&gt;&gt;User1: messageId: 125\n    Note over  Server,User1: response to 'new' request\n    Server-&gt;&gt;User2: server event 'new' (messageId: 125)\n    User2--)Server: Ack for 'new' event\n    deactivate Server\n    Note over User1,User2: \"delivering\"\n\n    User2-&gt;&gt;Server: Message 125 delivered\n    activate Server\n    Note over  User2,Server: request 'dlvrd'\n    Server-&gt;&gt;User2: \ud83e\udee1\n    Note over  Server,User2: response to 'dlvrd'\n    Server-&gt;&gt;User1: Event that message has been delivered\n    Note over  Server,User1: server event 'dlvrd'\n    User1-&gt;&gt;Server: Ack for dlvrd event\n\n\n    User2-&gt;&gt;Server: Message read (messageId: 125)\n    Note over User2,Server: request 'read'\n    Server-&gt;&gt;User2: \ud83e\udee1\n    Note over  Server,User2: response\n\n    Server--)User1: Notification that message has been read\n    Note over  Server,User1: server event 'read'\n    User1-&gt;&gt;Server: Ack for read event\n\n\n    User1-&gt;&gt;Server: User1 requests deletion of a message sent to User2 (id: 2)\n    Note over User1,Server: request\n\n    Server-&gt;&gt;User1: Accept deletion\n    Note over Server,User1: response\n    Server--)User2: Notification that a message from User1 has been deleted\n    Note over  Server,User2: event\n    User2-&gt;&gt;Server: Ack for message deleted event\n\n</code></pre> <p>User1 to server: User1 is typing a message to User2</p> <pre><code>{\n  \"type\": \"event\",\n  \"timestamp\": 1700500000000,\n  \"payloadType\": \"typing\",\n  \"payload\": {\n    \"chatId\": \"User2\"\n  }\n}\n</code></pre> <p>Server to User2: typing event notification</p> <pre><code>{\n  \"type\": \"event\",\n  \"timestamp\": 1700500000000,\n  \"eventType\": \"typing\",\n  \"payload\": {\n    \"chatId\": \"User1\"\n  }\n}\n</code></pre> <p>User1 to server: User1 sends a message with an image to User2</p> <pre><code>{\n  \"type\": \"request\",\n  \"timestamp\": 1700300000000,\n  \"id\": \"1\",\n  \"payloadType\": \"new\",\n  \"payload\": {\n    \"chatId\": \"User2\",\n    \"clientMessageId\": \"9CD99794-6D8E-4E82-9C97-D474831A43E3\",\n    \"message\": \"Check out this photo!\",\n    \"attachments\": [\n      {\n        \"type\": \"image\",\n        \"id\": \"img123\",\n        \"filename\": \"photo.jpg\",\n        \"url\": \"&lt;http://example.com/photo.jpg&gt;\",\n        \"meta\": {\n          \"mimetype\": \"image/jpeg\",\n          \"width\": 1024,\n          \"height\": 768,\n          \"size\": 204800\n        }\n      }\n    ]\n  }\n}\n</code></pre> <p>Server to User1: \ud83e\udee1</p> <pre><code>{\n  \"type\": \"response\",\n  \"timestamp\": 1700200000000,\n  \"id\": \"1\",\n  \"payload\": { \"messageId\": 125, \"clientMessageId\": \"9CD99794-6D8E-4E82-9C97-D474831A43E3\" }\n}\n</code></pre> <p>Server to User2: New Message Event with Image</p> <pre><code>{\n  \"type\": \"event\",\n  \"timestamp\": 1700300000000,\n  \"id\": 1,\n  \"eventType\": \"new\",\n  \"payload\": {\n    \"chatId\": \"User1\",\n    \"messageId\": 125,\n    \"clientMessageId\": \"9CD99794-6D8E-4E82-9C97-D474831A43E3\",\n    \"message\": \"Check out this photo!\",\n    \"attachments\": [\n      {\n        \"type\": \"image\",\n        \"id\": \"img123\",\n        \"filename\": \"photo.jpg\",\n        \"url\": \"&lt;http://example.com/photo.jpg&gt;\",\n        \"meta\": {\n          \"mimetype\": \"image/jpeg\",\n          \"width\": 1024,\n          \"height\": 768,\n          \"size\": 204800\n        }\n      }\n    ],\n    \"missed\": 1\n  }\n}\n</code></pre> <p>User2 to server: ack</p> <pre><code>{\n  \"type\": \"ack\",\n  \"id\": 1  \n}\n</code></pre> <p>User2 to server: message delivered</p> <pre><code>{\n  \"type\": \"request\",\n  \"timestamp\": 1700200000000,\n  \"id\": \"101\",\n  \"payloadType\": \"dlvrd\",\n  \"payload\": {\n    \"chatId\": \"User1\",\n    \"messageId\": 125\n  }\n}\n</code></pre> <p>Server to User2: \ud83e\udee1</p> <pre><code>{\n  \"type\": \"response\",\n  \"timestamp\": 1700200000000,\n  \"id\": \"101\"\n}\n</code></pre> <p>Server to User1: notification that message from User2 has been delivered</p> <pre><code>{\n  \"type\": \"event\",\n  \"timestamp\": 1700200000000,\n  \"id\": 1,\n  \"eventType\": \"dlvrd\",\n  \"payload\": {\n    \"chatId\": \"User1\",\n    \"messageId\": 125,\n    \"clientMessageId\": \"9CD99794-6D8E-4E82-9C97-D474831A43E3\"\n  }\n}\n</code></pre> <p>User1 to server: ack</p> <pre><code>{\n  \"type\": \"ack\",\n  \"id\": 1  \n}\n</code></pre> <p>User2 to server: message read</p> <pre><code>{\n  \"type\": \"request\",\n  \"timestamp\": 1700200000000,\n  \"id\": \"102\",\n  \"payloadType\": \"read\",\n  \"payload\": {\n    \"chatId\": \"User1\",\n    \"messageId\": 125\n  }\n}\n</code></pre> <p>Server to User2: response \ud83e\udee1</p> <pre><code>{\n  \"type\": \"response\",\n  \"timestamp\": 1700200002000,\n  \"id\": \"102\",\n  \"payloadType\": \"read\",\n  \"payload\": {\n    \"chatId\": \"User1\",\n    \"messageId\": 125,\n    \"clientMessageId\": \"9CD99794-6D8E-4E82-9C97-D474831A43E3\",\n    \"missed\": 0\n  }\n}\n</code></pre> <p>Server to User1: notification that message from User2 has been read</p> <pre><code>{\n  \"type\": \"event\",\n  \"timestamp\": 1700200000000,\n  \"id\": 2,\n  \"eventType\": \"read\",\n  \"payload\": {\n    \"chatId\": \"User2\",\n    \"messageId\": 125,\n    \"clientMessageId\": \"9CD99794-6D8E-4E82-9C97-D474831A43E3\"\n  }\n}\n</code></pre> <p>User1 to server: ack</p> <pre><code>{\n  \"type\": \"ack\",\n  \"id\": 2 \n}\n</code></pre> <p>User1 to server: User1 requests deletion of a message sent to User2</p> <pre><code>{\n  \"type\": \"request\",\n  \"timestamp\": 1700400000000,\n  \"id\": \"2\",\n  \"payloadType\": \"delete\",\n  \"payload\": {\n    \"chatId\": \"User2\",\n    \"messageId\": 125,\n    \"clientMessageId\": \"9CD99794-6D8E-4E82-9C97-D474831A43E3\"\n  }\n}\n</code></pre> <p>Server to User1: response \ud83e\udee1</p> <pre><code>{\n  \"type\": \"response\",\n  \"timestamp\": 1700400002000,\n  \"id\": \"2\"\n}\n</code></pre> <p>Server to User2: notification that a message from User1 has been deleted</p> <pre><code>{\n  \"type\": \"event\",\n  \"timestamp\": 1700500000000,\n  \"id\": 2,\n  \"eventType\": \"delete\",\n  \"payload\": {\n    \"chatId\": \"User1\",\n    \"messageId\": 125,\n    \"clientMessageId\": \"9CD99794-6D8E-4E82-9C97-D474831A43E3\"\n  }\n}\n</code></pre> <p>User2 to server: ack</p> <pre><code>{\n  \"type\": \"ack\",\n  \"id\": 2 \n}\n</code></pre>"},{"location":"examples/#example-user-status-notifications","title":"Example: user status notifications","text":""},{"location":"examples/#online-notification","title":"Online notification","text":"<p>Server to User2: User1 Comes Online (without id)</p> <pre><code>{\n  \"type\": \"event\",\n  \"timestamp\": 1700400000000,\n  \"eventType\": \"online\",\n  \"payload\": {\n    \"userId\": \"User1\"\n  }\n}\n</code></pre>"},{"location":"examples/#offline-notification","title":"Offline notification","text":"<p>User1 to server: User1 Comes Offline</p> <pre><code>{\n  \"type\": \"event\",\n  \"timestamp\": 1700400000000,\n  \"eventType\": \"offline\"\n}\n</code></pre> <p>Server to User2: User1 Goes Offline</p> <pre><code>{\n  \"type\": \"event\",\n  \"timestamp\": 1700400000000,\n  \"eventType\": \"offline\",\n  \"payload\": {\n    \"userId\": \"User1\"\n  }\n}\n</code></pre>"},{"location":"examples/#ack","title":"ack","text":"<p>Client to server: Acknowledgment of an event</p> <pre><code>{\n  \"type\": \"ack\",\n  \"id\": 23\n}\n</code></pre> <p>Server to client: Acknowledgment received</p> <pre><code>{\n  \"type\": \"response\",\n  \"timestamp\": 1700200000000,\n  \"id\": \"23\"\n}\n</code></pre>"},{"location":"examples/#dlvrd","title":"dlvrd","text":"<p>User1 to server</p> <pre><code>{\n    \"type\": \"request\",\n    \"timestamp\": 1700300000000,\n    \"id\": \"14\",\n    \"payloadType\": \"dlvrd\",\n    \"payload\": {\n        \"chatId\": \"User2\"\n    }\n}\n</code></pre> <p>Server to User1</p> <pre><code>{\"type\":\"response\",\"id\":\"14\",\"timestamp\":1714343766000,\"payload\":{}}\n</code></pre> <p>Server to User2</p> <pre><code>{\n    \"eventType\": \"dlvrd\",\n    \"id\": 6,\n    \"payload\": {\n        \"chatId\": \"User1\",\n        \"messageId\": 15,\n        \"timestamp\": 1714343766000\n    },\n    \"timestamp\": 1714343766000,\n    \"type\": \"event\"\n}\n</code></pre>"},{"location":"http-api/","title":"swagger","text":""},{"location":"ping/","title":"Connection, Online Statuses, and Ping-Pong","text":""},{"location":"ping/#connection-and-statuses","title":"Connection and statuses","text":"<p>Upon establishing a WebSocket connection, all your contacts will receive an \"online\" event</p> <pre><code>{\n  \"type\": \"event\",\n  \"timestamp\": 1700400000000,\n  \"eventType\": \"online\",\n  \"payload\": {\n    \"userId\": \"YouId\"\n  }\n}\n</code></pre> <p>You will receive an \"online\" event for each of your contacts who are currently online</p> <pre><code>{\n  \"type\": \"event\",\n  \"timestamp\": 1700600000000,\n  \"eventType\": \"online\",\n  \"payload\": {\n    \"userId\": \"YouFriend\"\n  }\n}\n</code></pre> <p>When the WebSocket connection is closed, all your contacts will receive an \"offline\" event. The closure can occur due to:</p> <pre><code>{\n  \"type\": \"event\",\n  \"timestamp\": 1700900000000,\n  \"eventType\": \"offline\",\n  \"payload\": {\n    \"userId\": \"YouId\"\n  }\n}\n</code></pre>"},{"location":"ping/#ping-pong","title":"Ping-Pong","text":"<p>To maintain the connection, the client must send a message at least once every 20 seconds. If there is nothing specific to send, the client can send any character or the string \"ping\". The server will respond with <code>{\"event\":\"pong\"}</code></p> <p>If there are no requests or pings from the client for 20 seconds, the client will be disconnected, and an \"offline\" event will be broadcast.</p>"},{"location":"ping/#recommendations","title":"Recommendations","text":"<ul> <li>Reconnect if the server does not respond to ping messages within 5 seconds.</li> <li>When the mobile application transitions to the background, schedule the WebSocket disconnection within 1-20 seconds (depending on the platform) to ensure more predictable behavior</li> </ul>"},{"location":"server-events/","title":"Server events","text":""},{"location":"server-events/#new","title":"new","text":"Field Type Example Possible Values chatId string \"User1\" Chat IDs sender? string \"User1\" User IDs senderName? string \"John Doe\" Any string messageId integer 124 Message IDs clientMessageId string \"66d93f9b-a8ff-4f18-a092-c19bdeb31fa4\" Any string message? string \"Hello, World!\" Any string attachments? array See \"Attachments\" Array of Attachment objects timestamp? integer 1700500000000 Unix timestamp missed integer 1 Missed messages status string \"read\" \"read\", \"unread\", \"undelivered\", \"deleted\""},{"location":"server-events/#chats","title":"chats","text":"<p>new chat / chat deletion</p> <p>ChatList (1)</p> 1. Field type ChatType id string photoUrl? string name string lastMessageText string lastMessageTime Date lastMessageAuthor? string lastMessageStatus MessageStatus missed? number verified? boolean isMine boolean lastMessageId integer"},{"location":"server-events/#delete","title":"delete","text":"Field Type Example Possible Values chatId string \"User1\" Chat IDs messageId integer 124 Message IDs originalMessageId integer 1 Message IDs"},{"location":"server-events/#online","title":"online","text":"Field Type Example Possible Values userId string \"User1\" User IDs"},{"location":"server-events/#offline","title":"offline","text":"Field Type Example Possible Values userId string \"User1\" User IDs <p>Offline Event Trigger</p> <p>If there is no ping from the client for 20 seconds, the WebSocket connection will be closed, and an \"offline\" event will be sent to all participants.</p>"},{"location":"server-events/#typing","title":"typing","text":"Field Type Example Possible Values userId string \"User2\" User IDs chatId? string \"User2\" Chat IDs stop? boolean true"},{"location":"server-events/#dlvrd","title":"dlvrd","text":"Field Type Example Possible Values chatId string \"User2\" Chat IDs userId? string \"User2\" user (for groups) messageId integer 123 Message IDs clientMessageId string \"123\" timestamp integer 1700500000000"},{"location":"server-events/#read","title":"read","text":"Field Type Example Possible Values chatId string \"User2\" Chat IDs userId? string \"User2\" user (for groups) messageId integer 123 Message IDs clientMessageId string \"123\" timestamp integer 1700500000000"},{"location":"stories/","title":"Stories API","text":""},{"location":"stories/#request","title":"Request","text":"<pre><code>{\n  \"lastStoryTime\": 1724318805948\n}\n</code></pre>"},{"location":"stories/#response","title":"Response","text":"<pre><code>{\n  \"stories\": [\n    {\n      \"userId\": \"User11\",\n      \"id\": \"JuPapCdd2\",\n      \"status\": \"unseen\",\n      \"time\": 1724318805948,\n      \"content\": [\n        {\n          \"startTime\": 0,\n          \"duration\": 10,\n          \"type\": \"photo\",\n          \"url\": \"https://dev.iambig.ai/public/c71ef0877c75566ae5a3a794e67cee43d81e6c719bab5339d08775779386e6f3\"\n        }\n      ]\n    },\n    {\n      \"userId\": \"User11\",\n      \"id\": \"sddsds\",\n      \"time\": 1724600000000,\n      \"status\": \"seen\",\n      \"content\": [\n        {\n          \"startTime\": 0,\n          \"duration\": 100,\n          \"type\": \"video\",\n          \"url\": \"stream://dev.iambig.ai/public/c71ef0877c75566ae5a3a794e67cee43d81e6c719bab5339d08775779386e6f3\"\n        }\n      ]\n    },\n    {\n      \"userId\": \"User122\",\n      \"id\": \"JuPapCdd2d\",\n      \"status\": \"unseen\",\n      \"time\": 1724318805948,\n      \"content\": [\n        {\n          \"startTime\": 0,\n          \"duration\": 10,\n          \"type\": \"photo\",\n          \"url\": \"https://dev.iambig.ai/public/c71ef0877c75566ae5a3a794e67cee43d81e6c719bab5339d08775779386e6f3\"\n        }\n      ]\n    }\n  ],\n  \"authors\": [\n    {\n      \"id\": \"User11\",\n      \"name\": \"User One\",\n      \"avatarUrl\": \"https://example.com/avatar1.jpg\"\n    },\n    {\n      \"id\": \"User122\",\n      \"name\": \"User Two\",\n      \"avatarUrl\": \"https://example.com/avatar2.jpg\"\n    }\n  ]\n}\n</code></pre>"},{"location":"upload/","title":"Upload File","text":"<p>to dev.imabig.ai/public/</p>"},{"location":"guides/dlvrd-read-marks-rules/","title":"dlvrd/read marks rules","text":"<p>dlvrd and read mark side effect</p> <p>affected chatList and messages response</p> <ul> <li> <p>If you mark message #5 as read, but it is not marked as delivered, both delivery and reading are marked.</p> </li> <li> <p>If you mark message #10 as read or delivered, and before that only message #5 was marked, then messages #6,7,8,9,10 are marked with the same timestamp.</p> </li> <li> <p>When a message is marked as read or delivered, a timestamp of this event is saved on the server (usually within 70 ms after the request is sent). Repeat requests to mark messages as read or delivered are allowed (but it is undesirable; you should not send a request to mark a message as read if its status is <code>read</code>). For the second and subsequent requests to mark a message as delivered or read, the timestamp is not replaced; the response to such a request will contain the timestamp of when the message was first marked as read or delivered.</p> </li> <li> <p>When you establish a websocket connection, all messages addressed to you with the status 'undelivered' are marked as delivered.</p> </li> <li> <p>While you are online, incoming messages are immediately marked as delivered.</p> </li> <li> <p>Repeat read/dlvrd marks will not be sent to the message author.</p> </li> </ul>"},{"location":"guides/grouping-events-by-key/","title":"Handling Out-of-Order Events","text":"<p>Events can arrive in any order. For example, a user may go offline and then come back online. If this is not taken into account, the following issues may arise:</p>"},{"location":"guides/grouping-events-by-key/#problems-without-proper-event-handling","title":"Problems Without Proper Event Handling","text":"<ol> <li> <p>Online/Offline: Events can arrive in any order. For example, a user might go offline first and then come back online. If the system does not account for timestamps, the user's status may remain \"offline\" even though they are actually online. This leads to incorrect status display.</p> </li> <li> <p>Last Messages for Chat List: New message events can also arrive in any order. For example, a chat message might arrive later than it was sent. If timestamps are not considered and events are not grouped by <code>chatId</code>, outdated messages might be displayed in the chat list, showing users incorrect message order.</p> </li> <li> <p>Editing: Edit events can arrive in any order. For example, the first edit event of message might arrive later than the second edit event. If the combination of <code>chatId</code> and <code>messageId</code> is not considered, the system might process the second edit first and then the first edit, leading to loss of edit data and incorrect information display.</p> </li> </ol>"},{"location":"guides/grouping-events-by-key/#solution-defining-keys-for-events","title":"Solution: Defining Keys for Events","text":"<ol> <li> <p>Online/Offline: Use <code>userId</code> as the key. Example: <code>online-status:bS8JHietAb5O4l7KvGIwf</code>.</p> </li> <li> <p>Last Messages for Chat List: Use <code>chatId</code> as the key. Example: <code>chat:superId</code>.</p> </li> <li> <p>Editing: Use a combination of <code>chatId</code> and <code>messageId</code> as the key. Example: <code>edit:chat123:1002</code>.</p> </li> </ol>"},{"location":"guides/grouping-events-by-key/#event-processing-rules","title":"Event Processing Rules","text":"<ol> <li> <p>Store the last timestamp for each key: Keep track of the last timestamp for each key.</p> </li> <li> <p>Compare the new event's timestamp with the stored one: When a new event arrives, determine its key and compare its timestamp with the stored one.</p> </li> <li> <p>Discard outdated events: If the new timestamp is less than the stored timestamp, discard the event. (Note: if it is a new message event for the chat list, it will not be applied to the chat list, but the message itself will be loaded).</p> </li> <li> <p>Accept and update the timestamp: If the new timestamp is greater, update the stored timestamp for the key and accept the event.</p> </li> </ol> <p></p>"},{"location":"guides/message-edit-delete/","title":"Message Edit/Delete","text":"<p>When a message is edited or deleted, it creates a new service message with type <code>new</code> or <code>edit</code> and payload <code>{ originalMessageId }</code>.</p>"},{"location":"types/attachment/","title":"Attachment","text":"Field Type Example Possible Values type string \"image\" \"file\", \"image\", \"video\" id string \"file123\" Attachment IDs filename string \"greeting.png\" File names url string \"https://example.com/greeting.png\" URLs meta object See \"Specific Attachment metas\" below Depends on type"},{"location":"types/attachment/#specific-attachment-metas","title":"Specific Attachment metas","text":""},{"location":"types/attachment/#file-meta","title":"File meta","text":"Field Type Example Possible Values extension string \"pdf\" \"pdf\", \"txt\", \"docx\", \"xlsx\", etc. size integer 2048000 File size in bytes"},{"location":"types/attachment/#image-meta","title":"Image meta","text":"Field Type Example Possible Values mimetype string \"image/png\" \"image/jpeg\", \"image/png\", \"image/gif\" width integer 800 Image width in pixels height integer 600 Image height in pixels size integer 350000 File size in bytes"},{"location":"types/attachment/#video-meta","title":"Video meta","text":"Field Type Example Possible Values mimetype string \"video/mp4\" \"video/mp4\", \"video/gif\" width integer 1920 Video width in pixels height integer 1080 Video height in pixels size integer 5000000 File size in bytes duration integer 120 Duration in seconds"},{"location":"types/chat-list/","title":"ChatList","text":"<p>ChatListItem[]</p>"},{"location":"types/chat-list/#chatlistitem","title":"ChatListItem","text":"Field Type Example Description type ChatType \"group\" \"dialog\" | \"group\" | \"channel\" | \"favorites\" | \"ai\" id string \"JC0TvKi3f2bIQtBcW1jIn\" The unique identifier for the chat item. photoUrl? string \"dev.big.a-kuznetsov.cc/public/de\" Optional URL to the chat's photo. name string \"John Doe\" The name of the chat. lastMessageText? string \"Hello, World!\" The text of the last message in the chat. lastMessageTime? Date 1700000000000 The timestamp of the last message. Use Date for DateTime representation. lastMessageAuthor? string \"User1\" Optional author of the last message. lastMessageStatus? MessageStatus \"read\" \"read\" | \"unread\" | \"undelivered\" | \"deleted\" missed? number 3 The count of missed messages in the chat. firstMissed? string clientMessageId of first missed (unread) verified? boolean true Indicates whether the chat is verified. isMine? boolean true Indicates whether the chat item belongs to the current user. lastMessageId? integer 123 The unique identifier for the last message in the chat. lastSeen? integer 1700000000000 only for offline status"},{"location":"types/chat-list/#messagestatus","title":"MessageStatus","text":"<p>\"read\" | \"unread\" | \"undelivered\"</p>"},{"location":"types/chat-list/#chattype","title":"ChatType","text":"<p>\"dialog\" | \"group\" | \"channel\" | \"favorites\" | \"ai\"</p> ChatList example <pre><code>  [\n      {\n          \"type\": \"dialog\",\n          \"id\": \"JC0TvKi3f2bIQtBcW1jIn\",\n          \"lastMessageStatus\": \"unread\",\n          \"photoUrl\": \"https://dev.big.a-kuznetsov.cc/public/de5d8114f9fa6bc906ca6972f9750d582b86bac94aadd0ee7550b2bd1a25b8607\",\n          \"lastMessageText\": \"Hello, how are you?\",\n          \"lastMessageTime\": 1713437858000,\n          \"missed\": 0,\n          \"name\": \"@JC0TvKi3f2bIQtBcW1jIn\",\n          \"verified\": false,\n          \"lastMessageAuthor\": \"\",\n          \"isMine\": true\n      },\n      {\n          \"type\": \"dialog\",\n          \"id\": \"EiuOGJcrQoY0LjL2-FbtG\",\n          \"photoUrl\": \"https://dev.big.a-kuznetsov.cc/public/de5d8114f9fa6bc906ca6972f9750d582b86bac94aadd0ee7550b2bd1a25b8604\",\n          \"lastMessageStatus\": \"unread\",\n          \"lastMessageText\": \"&lt;string&gt;\",\n          \"lastMessageTime\": 1713437858000,\n          \"missed\": 0,\n          \"name\": \"\u0421\u0435\u0440\u0451\u0436\u0430\",\n          \"verified\": false,\n          \"lastMessageAuthor\": \"\u0421\u0435\u0440\u0451\u0436\u0430\",\n          \"isMine\": false\n      }\n  ]\n</code></pre>"},{"location":"types/chat/","title":"Chat","text":"Field Type Example chatId string \"User2\" photoUrl string \"iambig.ai/public/de5d8114f9\" name string \"Stive\" type \"dialog\", \"group\", \"channel\",'ai' \"dialog\" lastMessageId? integer 1000 missed integer 0 firstMissed? string clientMessageId of first missed (unread) meta Meta ..."},{"location":"types/chat/#meta","title":"Meta","text":"<p>DialogMeta | GroupMeta</p>"},{"location":"types/chat/#dialogmeta","title":"DialogMeta","text":"Field Type Example firstName? string \"Alexander\" lastName? string \"Kuzopi\" username? string \"User2\" phoneNumber? string \"User2\" verified? bool true lastSeen? integer only for offline status"},{"location":"types/chat/#groupmeta","title":"GroupMeta","text":"Field Type Example owner string \"User1\" participants Profile[] [{ \"id\": \"weEwdx2\",\"firstName\": \"Aleksandr\",\"avatarUrl\": \"https://pics.png/png.png\", \"verified\": \"true\" }] createdAt integer 1663272000000"},{"location":"types/chat/#profile","title":"Profile","text":"Field Type Example firstName? string \"Alexander\" lastName? string \"Kuzopi\" username? string \"User2\" phoneNumber? string \"User2\" verified? bool true avatarUrl? string \"https://pics.png/png.png\""},{"location":"types/message/","title":"Message","text":""},{"location":"types/message/#dialog-message","title":"Dialog message","text":"Field Type Example Possible Values messageId integer 123 Message IDs clientMessageId string \"66d93f9b-a8ff-4f18-a092-c19bdeb31fa4\" Any string message? string \"Hello\" Any string sender string \"User1\" User IDs attachments? array See \"Attachments\" Array of Attachment objects forwarded? bool true true, false replyTo? ReplyTo <code>{messageId: 1, sender: \"sXvf__\", createdAt:123, message: \"text\", clientMessageId: \"123-213\" }</code> status string \"read\" \"read\", \"unread\", \"undelivered\", \"deleted\" type string \"new\" \"new\", \"edit\", \"delete\", \"call\" payload? object MessagePayload Any object createdAt timestamp 123456789 Timestamp updatedAt? timestamp 123456789 Timestamp deletedAt? timestamp 123456789 Timestamp"},{"location":"types/message/#group-chat-message","title":"Group chat message","text":"Field Type Example Possible Values messageId integer 123 Message IDs clientMessageId? string \"66d93f9b-a8ff-4f18-a092-c19bdeb31fa4\" Any string message? string \"Hello\" Any string sender string \"User1\" User IDs attachments? array See \"Attachments\" Array of Attachment objects delivering Delivering[] <code>[{userId:\"User1\", dlvrd: 12312312, read: 123123}]</code> createdAt timestamp 123456789 Timestamp updatedAt? timestamp 123456789 Timestamp deletedAt? timestamp 123456789 Timestamp"},{"location":"types/message/#delivering","title":"Delivering","text":"Field Type Example Possible Values userId string \"User1\" User IDs dlvrd? timestamp 123456789 Timestamp read? timestamp 123456789 Timestamp"},{"location":"types/message/#messagepayload","title":"MessagePayload","text":"<p>MessagePayload can be one of the following:</p>"},{"location":"types/message/#editpayload","title":"EditPayload","text":"Field Type Example Possible Values originalMessageId integer 123 Message IDs"},{"location":"types/message/#deletionpayload","title":"DeletionPayload","text":"Field Type Example Possible Values originalMessageId integer 123 Message IDs"},{"location":"types/reply-to/","title":"ReplyTo","text":"Field Type Example Possible Values messageId integer 123 Message IDs clientMessageId string \"66d93f9b-a8ff-4f18-a092-c19bdeb31fa4\" Any string message? string \"Hello\" Any string sender string \"User1\" User IDs createdAt timestamp 123456789 Timestamp"}]}